//
//   Copyright 2020-2021 SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

{
  'name' 'GITLOG'
  'since' '2.7.2'
  'deprecated' ''
  'deleted' ''
  'version' 'all'
  'tags' [ 'extensions' ]
  'ext' 'io.warp10.ext.git.GitWarpScriptExtension'
  'desc' 
<'
The `GITLOG` function retrieves log entries for the given pathes. The operation will only succeed if the execution environment currently contains capabilities for the target repository.

The log entries returned are maps with the following keys:

| Key | Description |
|-----|-------------|
| `rev` | The git revision string for the entry. |
| `type` | The type of entry. |
| `message` | The message associated with the entry. |
| `author.name` | The name of the author of the change. |
| `author.email` | The email address of the author of the change. |
| `author.timestamp` | The timestamp of the change, expressed in your platform time units. |
| `committer.name` | The name of the committer of the change. |
| `committer.email` | The email address of the committer of the change. |
| `committer.timestamp` | The timestamp of the commit. |
'>

  'sig' [ 
    [
      [ 
        {
          'repo' 'repo:STRING'
          'path' 'path:STRING'
          'count' 'count:LONG'
          'skip' 'skip:LONG'
        }
      ]  [] ] 
  ]

  'params' {
    'repo' 'Name of git repository to access.'
    'path' 'Path relative to `repo`. If the current `git.subdir` capability is set, the path will be relative to that subdirectory in `repo`. This entry can also be a `LIST` of pathes.'
    'count' 'Optional maximum number of log entries to return.'
    'skip' 'Optional number of log entries to skip before returning entries.'
  }

  'related' [ 'GITSTORE' 'GITLOAD' 'GITFIND' 'GITRM' 'GITTAG' ]
  'examples' [
<'
'TOKEN_WITH_GIT_CAPABILITIES' CAPADD
{
  'repo' 'myrepo'
  'path' [ 'file1' 'path/to/files2' ]
}
GITLOG
'>
  ]

  'conf' [ 'git.root' ]
} '.info' STORE
<%
  $.info INFO
  <%
    'GITLOG' EVAL
  %> <% %> <% %> TRY
%>
